
$username = $env:UserName
$outputfolder = "C:\Users\$username\Downloads"


$HowManyDays = 10

$accessId = ''
$accessKey = ''

$rp = '/alert/alerts'
$sortqueryparam = 'sort=startEpoch'
$customcolumns = 'customColumns=%2523%2523CustomerName%2523%2523'
$size = 1000
$sizeparam = "size=$size"
$2hourseconds = 60*60*2
$5hourseconds = 5*60*60
$epochnow = [Math]::Round((New-TimeSpan -Start (Get-Date "01/01/1970") -End (Get-Date)).TotalSeconds)
$Xdaysagoepoch = [Math]::Round((New-TimeSpan -Start (Get-Date "01/01/1970") -End ((Get-Date).AddDays(($HowManyDays*-1)))).TotalSeconds) + $5hourseconds
$thisepoch = $Xdaysagoepoch
[array]$timedfilterlist = $(While ($thisepoch -le $epochnow){
    $nextepoch = $thisepoch + $2hourseconds
    "filter=startEpoch>:$thisepoch"  + "," + "startEpoch<$nextepoch" + "," + "cleared~rue" + "," + "sdted~alse"
    "filter=startEpoch>:$thisepoch"  + "," + "startEpoch<$nextepoch" + "," + "cleared~alse" + "," + "sdted~alse"
    $thisepoch = $nextepoch
})




$timequeryparamClearedTrue = "filter=startEpoch>:$Xdaysagoepoch"  + "," + "cleared~rue" + "," + "sdted~alse"
$timequeryparamClearedFalse = "filter=startEpoch>:$Xdaysagoepoch"  + "," + "cleared~alse" + "," + "sdted~alse"
$filterlist = $timequeryparamClearedTrue, $timequeryparamClearedFalse
$qp = '?' + $sortqueryparam + '&' + $sizeparam + '&' + $customcolumns



########################################################################################
Function LMAPICall ($method, $company, $accessid, $accesskey,$resourcePath,$body,$queryparams) {

<# request details #>
$httpVerb = $method.ToUpper()
if ($httpVerb -eq "get") {$body = $null}

<# Construct URL #>
$url = 'https://' + $company + '.logicmonitor.com/santaba/rest' + $resourcePath 

<# Get current time in milliseconds #>
$epoch = [Math]::Round((New-TimeSpan -start (Get-Date -Date "1/1/1970") -end (Get-Date).ToUniversalTime()).TotalMilliseconds)

<# Concatenate Request Details #>
$requestVars = $httpVerb + $epoch + $body + $resourcePath

<# Construct Signature #>
$hmac = New-Object System.Security.Cryptography.HMACSHA256
$hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
$signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
$signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace '-'
$signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))

<# Construct Headers #>
$auth = 'LMv1 ' + $accessId + ':' + $signature + ':' + $epoch
$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Authorization",$auth)
$headers.Add("Content-Type",'application/json')
#$headers.Add("Accept",'application/json')

<# Make Request #>
if($httpVerb -eq "get"){
    If ($queryparams.length -gt 0){
        $response = Invoke-RestMethod -Uri $($url + $queryparams + '&v=1') -Method Get -Header $headers
    } Else{
    $response = Invoke-RestMethod -Uri $($url + "?v=1") -Method Get -Header $headers }
}
Elseif ($httpVerb -eq "put"){
    $response = Invoke-RestMethod -Uri $($url) -Method Put -Header $headers -Body $body}
Elseif ($httpVerb -eq "Patch"){
    $queryparams = '?patchFields=customProperties&opType=refresh'
        $response = Invoke-RestMethod -Uri $($url + $queryparams + '&v=1') -Method Patch -Header $headers -Body $body}

Else {Write-host "UNACCEPTABLE REST METHOD"; break}

$response
}
#############################################################################################


$overallcount = 0
$alertlist = foreach ($filter in $timedfilterlist){
    $alertcount = $size
    $offset = 0
    $thistimerangealerts = @()
    #Write-host "`n Checking for $filter `n"
    While ($alertcount -eq $size){
        #Write-Host "Offset is $offset"
        $alerts = LMAPICall -method get -company atsg -accessid $accessId -accesskey $accessKey -resourcePath $rp -queryparams ("$qp&$filter&offset=$offset")
        $alertcount = $alerts.data.items.Count
        if ($alertcount -eq $size){$offset += $size}

        $overallcount += $alertcount
        Write-Host "Current overall count is $overallcount"
        $thistimerangealerts += $alerts.data.items

    }

    $thistimerangealerts

}


# $alertlist  | Out-GridView



Write-Host "`n Doing initial parsing, and making a cleaned list `n"

$cleanedalertlist = $(foreach ($thisalert in $alertlist){

    $severitytext = if ($thisalert.severity -eq 2) {"Warning"} elseif ($thisalert.severity -eq 3) {"Error"} elseif ($thisalert.severity -eq 4) {"Critical"}
    $uniquecombo = "$($thisalert.monitorObjectName)"
    $uniquecombo += "::::" + "$($thisalert.resourceTemplateName)"
    $uniquecombo += "::::" + "$($thisalert.dataPointName)"
    $uniquecombowithinstance = $uniquecombo + "::::" + "$($thisalert.instanceName)"
    $uniquecombowithseverity = $uniquecombo + "::::" + "$severitytext"
    $uniquecombowithinstancewithseverity = $uniquecombowithinstance + "::::" + "$severitytext"

    $uniquedatasourceanddatapoint = "$($thisalert.resourceTemplateName)" + "::::" + "$($thisalert.dataPointName)"

   
    $duration = if ($thisalert.endEpoch -eq 0){[timespan]::fromseconds($epochnow - $thisalert.startEpoch)}Else{[timespan]::fromseconds($thisalert.endEpoch - $thisalert.startEpoch)}
    $durationsecs = $duration.TotalSeconds
    $DurationDaysHrsMinSecs = "{0:ddd\.hh\:mm\:ss}" -f  $duration

    [datetime]$origin = '1970-01-01 00:00:00'
    $startedDatetime =  (Get-date (Get-Date $origin).AddSeconds($thisalert.startEpoch).ToLocalTime() -Format 'yyyy-MM-dd HH:mm:ss')
    $endedDatetime =  if ($thisalert.endEpoch -eq 0){}Else{(Get-date (Get-Date $origin).AddSeconds($thisalert.endEpoch).ToLocalTime() -Format 'MM-dd-yy HH:mm:ss')}
    

    [PSCustomObject]@{
        id = $thisalert.internalId
        AlertType = $thisalert.type
        startedEpoch = $thisalert.startEpoch
        endedEpoch = $thisalert.endEpoch
        StartedDateTime = $startedDatetime
        EndedDateTime = $endedDatetime
        acked = $thisalert.acked
        ackedBy = $thisalert.ackedBy
        ackComment = $thisalert.ackComment
        rule = $thisalert.rule
        cleared = $thisalert.cleared
        SeverityCode =  $thisalert.severity
        Severity = $severitytext
        DurationSecs = $durationsecs
        DurationDaysHrsMinSecs =  $DurationDaysHrsMinSecs 
        SDTed = $thisalert.sdted
        AlertValue = $thisalert.alertValue
        Threshold = $thisalert.threshold
        datasourceName = $thisalert.resourceTemplateName
        InstanceName = $thisalert.instanceName
        datapointName = $thisalert.dataPointName
        ObjectName = $thisalert.monitorObjectName
        CustomerName = $thisalert.customColumns.'##CustomerName##' 
        Unique_Device_Datasource_Datapoint =  $uniquecombo
        Unique_Device_Datasource_Datapoint_Severity = $uniquecombowithseverity
        Unique_Device_Datasource_Datapoint_Instance = $uniquecombowithinstance
        Unique_Device_Datasource_Datapoint_Instance_Severity = $uniquecombowithinstancewithseverity
        Unique_DataSource_Datapoint = $uniquedatasourceanddatapoint
        Unique_DataSource_Datapoint_Severity = ($uniquedatasourceanddatapoint + "::::$severitytext")

    }

}) | Sort-Object startedEpoch -Descending

# $cleanedalertlist | Out-GridView
# $cleanedalertlist[0]
$cleanedalertlist | Sort startedEpoch -Descending | Where {$_.SDTed -match "false"} | Export-Csv "$outputfolder\$HowManyDays-days-AllNonSDTAlerts.csv" -NoTypeInformation -Force 


####################################################
Write-Host "`n Getting Unique items Lists `n"
# $UniqueDevDsDpInstList =  $cleanedalertlist.Unique_Device_Datasource_Datapoint_Instance | Sort-Object -Unique
# $UniqueDevDsDpList =  $cleanedalertlist.Unique_Device_Datasource_Datapoint | Sort-Object -Unique
# $UniqueOverallDsDpList = $cleanedalertlist.Unique_Datasource_Datapoint | Sort-Object -Unique

$groupbyudddi = $cleanedalertlist | Group-Object Unique_Device_Datasource_Datapoint_Instance | Sort Count -Descending
$groupbyuddd = $cleanedalertlist | Group-Object Unique_Device_Datasource_Datapoint | Sort Count -Descending
$groupbyUODD = $cleanedalertlist | Group-Object Unique_DataSource_Datapoint | Sort Count -Descending
$groupbyCustomerName = $cleanedalertlist | Group-Object CustomerName | Sort Count -Descending



# $udddi = $groupbyudddi[10]


Write-Host "`n Doing Alert Count Per Unique Datasource Across the ENTIRE Environment"

$(Measure-Command -Expression {
$CountPerUniqueOverallDsDp = foreach ($UODD in $groupbyUODD){
    
    $averagedurationsecs = ($UODD.Group.DurationSecs | Measure-Object -Average).Average
    $TimespanSinceLastOccurenceSecs = $UODD.Group.startedEpoch[0] - $UODD.Group.startedEpoch[1]
    $TimespanSinceLastOccurence = [timespan]::FromSeconds($TimespanSinceLastOccurenceSecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
    $StartedEpochDiffList = @(for ($i=0; $i -lt $UODD.Count-1; $i++) {$UODD.Group[$i].startedEpoch - $UODD.Group[$i+1].startedEpoch})
    $AvgBreakDurationBetweenOccurencesSecs = ($StartedEpochDiffList | Measure-Object -Average).Average
    $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($AvgBreakDurationBetweenOccurencesSecs)) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
    
    <#      if ($thisUDDD.count -lt 2){$StartedEpochDiffList = $null; $TimespanSinceLastOccurence = $null} Else {
            $StartedEpochDiffList = @(for ($i=0; $i -lt $thisUDDD.Count-1; $i++) {$thisUDDD[$i].startedEpoch - $thisUDDD[$i+1].startedEpoch})
            $TimespanSinceLastOccurence = [timespan]::FromSeconds($StartedEpochDiffList[0]) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($StartedEpochDiffList|Measure-Object -sum).sum/$StartedEpochDiffList.count) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
          

           
        } #>

        [PSCustomObject]@{
            Count = $UODD.Count
            Datasource_Datapoint = $UODD.Name
            #Device = $UODD.Group[0].ObjectName
            Datasource = $UODD.Group[0].datasourceName
            Datapoint = $UODD.Group[0].datapointName
            #CustomerName = $UODD.Group[0].CustomerName
            #Instance = $UODD.Group[0].InstanceName
            LatestOccurence = $UODD.Group[0].StartedDateTime
            LatestDuration = $UODD.Group[0].DurationDaysHrsMinSecs
            AverageDuration = [timespan]::FromSeconds($averagedurationsecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            BreakDurationSincePreviousOccurence = $TimespanSinceLastOccurence
            AvgBreakDurationBetweenOccurences = $AvgBreakDurationBetweenOccurences
            #"1HourClusterCount" = $1hourclusters.Count
            #"3HourClusterCount" = $3hourclusters.Count
            #"6HourClusterCount" = $6hourclusters.Count
            #"12HourClusterCount" = $12hourclusters.Count
            #"1HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $1hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"3HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $3hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"6HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $6hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"12HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $12hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            
            #AlertList = $thisUDDD        
        }
    


}  
}).TotalMinutes | % {$thistime = $_; Write-Host "Completed in $thistime mins "}

# $CountPerUniqueOverallDsDp | Out-GridView
Write-Host "Exporting CSV to $outputfolder\$HowManyDays-days-UniqueOverallDatasourceDatapoint.csv"
$CountPerUniqueOverallDsDp | Export-Csv "$outputfolder\$HowManyDays-days-UniqueOverallDatasourceDatapoint.csv" -NoTypeInformation -Force





Write-Host "`n Doing Count Per Unique 'Device' Datasource "
$CountPerUniqueDevDsDp = foreach ($UDDD in $groupbyUDDD){
    
    $averagedurationsecs = ($UDDD.Group.DurationSecs | Measure-Object -Average).Average
    $TimespanSinceLastOccurenceSecs = $UDDD.Group.startedEpoch[0] - $UDDD.Group.startedEpoch[1]
    $TimespanSinceLastOccurence = [timespan]::FromSeconds($TimespanSinceLastOccurenceSecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
    $StartedEpochDiffList = @(for ($i=0; $i -lt $UDDD.Count-1; $i++) {$UDDD.Group[$i].startedEpoch - $UDDD.Group[$i+1].startedEpoch})
    $AvgBreakDurationBetweenOccurencesSecs = ($StartedEpochDiffList | Measure-Object -Average).Average
    $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($AvgBreakDurationBetweenOccurencesSecs)) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
    
    <#      if ($thisUDDD.count -lt 2){$StartedEpochDiffList = $null; $TimespanSinceLastOccurence = $null} Else {
            $StartedEpochDiffList = @(for ($i=0; $i -lt $thisUDDD.Count-1; $i++) {$thisUDDD[$i].startedEpoch - $thisUDDD[$i+1].startedEpoch})
            $TimespanSinceLastOccurence = [timespan]::FromSeconds($StartedEpochDiffList[0]) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($StartedEpochDiffList|Measure-Object -sum).sum/$StartedEpochDiffList.count) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
          

           
        } #>

        [PSCustomObject]@{
            Count = $UDDD.Count
            Device = $UDDD.Group[0].ObjectName
            Datasource = $UDDD.Group[0].datasourceName
            Datapoint = $UDDD.Group[0].datapointName
            CustomerName = $UDDD.Group[0].CustomerName
            LatestOccurence = $UDDD.Group[0].StartedDateTime
            LatestDuration = $UDDD.Group[0].DurationDaysHrsMinSecs
            AverageDuration = [timespan]::FromSeconds($averagedurationsecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            BreakDurationSincePreviousOccurence = $TimespanSinceLastOccurence
            AvgBreakDurationBetweenOccurences = $AvgBreakDurationBetweenOccurences
            #"1HourClusterCount" = $1hourclusters.Count
            #"3HourClusterCount" = $3hourclusters.Count
            #"6HourClusterCount" = $6hourclusters.Count
            #"12HourClusterCount" = $12hourclusters.Count
            #"1HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $1hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"3HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $3hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"6HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $6hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"12HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $12hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            
            #AlertList = $thisUDDD        
        }
    

}  


# $CountPerUniqueDevDsDp | Out-GridView
Write-Host "Exporting CSV to $outputfolder\$HowManyDays-days-UniqueDeviceDatasourceDatapoint.csv"
$CountPerUniqueDevDsDp | Export-Csv "$outputfolder\$HowManyDays-days-UniqueDeviceDatasourceDatapoint.csv" -NoTypeInformation -Force



Write-Host "`n Doing Alert Count Per Unique Datasource Across the ENTIRE Environment"
$CountPerUniqueOverallDsDp = foreach ($UODD in $groupbyUDDD){
    
    $averagedurationsecs = ($UODD.Group.DurationSecs | Measure-Object -Average).Average
    $TimespanSinceLastOccurenceSecs = $UODD.Group.startedEpoch[0] - $UODD.Group.startedEpoch[1]
    $TimespanSinceLastOccurence = [timespan]::FromSeconds($TimespanSinceLastOccurenceSecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
    $StartedEpochDiffList = @(for ($i=0; $i -lt $UODD.Count-1; $i++) {$UODD.Group[$i].startedEpoch - $UODD.Group[$i+1].startedEpoch})
    $AvgBreakDurationBetweenOccurencesSecs = ($StartedEpochDiffList | Measure-Object -Average).Average
    $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($AvgBreakDurationBetweenOccurencesSecs)) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
    
    <#      if ($thisUDDD.count -lt 2){$StartedEpochDiffList = $null; $TimespanSinceLastOccurence = $null} Else {
            $StartedEpochDiffList = @(for ($i=0; $i -lt $thisUDDD.Count-1; $i++) {$thisUDDD[$i].startedEpoch - $thisUDDD[$i+1].startedEpoch})
            $TimespanSinceLastOccurence = [timespan]::FromSeconds($StartedEpochDiffList[0]) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            $AvgBreakDurationBetweenOccurences = [timespan]::FromSeconds(($StartedEpochDiffList|Measure-Object -sum).sum/$StartedEpochDiffList.count) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            
          

           
        } #>

        [PSCustomObject]@{
            Count = $UODD.Count
            #Device = $UODD.Group[0].ObjectName
            Datasource = $UODD.Group[0].datasourceName
            Datapoint = $UODD.Group[0].datapointName
            #CustomerName = $UODD.Group[0].CustomerName
            #Instance = $UODD.Group[0].InstanceName
            LatestOccurence = $UODD.Group[0].StartedDateTime
            LatestDuration = $UODD.Group[0].DurationDaysHrsMinSecs
            AverageDuration = [timespan]::FromSeconds($averagedurationsecs) | % { "{0:ddd\.hh\:mm\:ss}" -f  $_ }
            BreakDurationSincePreviousOccurence = $TimespanSinceLastOccurence
            AvgBreakDurationBetweenOccurences = $AvgBreakDurationBetweenOccurences
            #"1HourClusterCount" = $1hourclusters.Count
            #"3HourClusterCount" = $3hourclusters.Count
            #"6HourClusterCount" = $6hourclusters.Count
            #"12HourClusterCount" = $12hourclusters.Count
            #"1HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $1hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"3HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $3hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"6HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $6hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            #"12HourClusterTimeList" = if ($StartedEpochDiffList -gt 0){@(foreach ($n in $12hourclusters) {$thisuddd[$n].StartedDateTime}) -join(', ')} Else {$null}
            
            #AlertList = $thisUDDD        
        }
    

}  


# $CountPerUniqueOverallDsDp | Out-GridView
Write-Host "Exporting CSV to $outputfolder\$HowManyDays-days-UniqueOverallDatasourceDatapoint.csv"
$CountPerUniqueOverallDsDp | Export-Csv "$outputfolder\$HowManyDays-days-UniqueOverallDatasourceDatapoint.csv" -NoTypeInformation -Force


# $thiscustomer = $groupbyCustomerName[11]


Write-Host "`n Working on Alert summary By CustomerName "
$CountPerCustomer = foreach ($thiscustomer in $groupbyCustomerName) {
    
    $severitygrouping = $thiscustomer.Group | Group-Object Severity
    $devicegrouping = $thiscustomer.Group | Group-Object ObjectName
    $datasourcegrouping = $thiscustomer.Group | Group-Object datasourceName

    [PSCustomObject]@{

        CustomerName = $thiscustomer.Name
        OverallAlertCount = $thiscustomer.Count
        NumOfWarnings = $severitygrouping[0].Count
        NumOfErrors = $severitygrouping[1].count
        NumOfCriticals = $severitygrouping[2].count
        Top1Device = if($devicegrouping.Count -ge 1){$devicegrouping[0].Name};
        Top2Device = if($devicegrouping.Count -ge 2){$devicegrouping[1].Name};
        Top3Device = if($devicegrouping.Count -ge 3){$devicegrouping[2].Name};
        Top4Device = if($devicegrouping.Count -ge 4){$devicegrouping[3].Name};
        Top5Device = if($devicegrouping.Count -ge 5){$devicegrouping[4].Name};
        Top1DeviceAlertCount = if($devicegrouping.Count -ge 1){$devicegrouping[0].Count};
        Top2DeviceAlertCount = if($devicegrouping.Count -ge 2){$devicegrouping[1].Count};
        Top3DeviceAlertCount = if($devicegrouping.Count -ge 3){$devicegrouping[2].Count};
        Top4DeviceAlertCount = if($devicegrouping.Count -ge 4){$devicegrouping[3].Count};
        Top5DeviceAlertCount = if($devicegrouping.Count -ge 5){$devicegrouping[4].Count};
        Top1DataSource = if($datasourcegrouping.Count -ge 1){$devicegrouping[0].Name};
        Top2DataSource = if($datasourcegrouping.Count -ge 2){$devicegrouping[1].Name};
        Top3DataSource = if($datasourcegrouping.Count -ge 3){$devicegrouping[2].Name};
        Top4DataSource = if($datasourcegrouping.Count -ge 4){$devicegrouping[3].Name};
        Top5DataSource = if($datasourcegrouping.Count -ge 5){$devicegrouping[4].Name};
        Top1DataSourceAlertCount = if($datasourcegrouping.Count -ge 1){$devicegrouping[0].Count};
        Top2DataSourceAlertCount = if($datasourcegrouping.Count -ge 2){$devicegrouping[1].Count};
        Top3DataSourceAlertCount = if($datasourcegrouping.Count -ge 3){$devicegrouping[2].Count};
        Top4DataSourceAlertCount = if($datasourcegrouping.Count -ge 4){$devicegrouping[3].Count};
        Top5DataSourceAlertCount = if($datasourcegrouping.Count -ge 5){$devicegrouping[4].Count};


    }


}


Write-Host "Exporting CSV to $outputfolder\$HowManyDays-days-AlertsSummaryByCustomer.csv"
$CountPerUniqueOverallDsDp | Export-Csv "$outputfolder\$HowManyDays-days-AlertsSummaryByCustomer.csv" -NoTypeInformation -Force


Write-Host "`n`n Complete"
